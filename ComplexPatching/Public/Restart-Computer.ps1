param
(
    [parameter(Mandatory = $true)]
    [string]$ComputerName,
    # Provides the computer name to start

    [parameter(Mandatory = $true)]
    [string]$DryRun,
    # skips patching check so that we can perform a dry run of the drain an resume

    [parameter(Mandatory = $true)]
    [int32]$RBInstance,
    # RBInstance which represents the Runbook Process ID for this runbook workflow

    [parameter(Mandatory = $true)]
    [string]$SQLServer,
    # Database server for staging information during the patching process

    [parameter(Mandatory = $true)]
    [string]$OrchStagingDB,
    # Database for staging information during the patching process

    [parameter(Mandatory = $true)]
    [string]$LogLocation
    # UNC path to store log files in
)

#region import modules
Import-Module -Name ComplexPatching
#endregion import modules

#-----------------------------------------------------------------------

## Initialize result and trace variables
# $ResultStatus provides basic success/failed indicator
# $ErrorMessage captures any error text generated by script
# $Trace is used to record a running log of actions
[bool]$DryRun = ConvertTo-Boolean $DryRun
$ResultStatus = "Success"
$ErrorMessage = ""
$global:CurrentAction = ""
$ScriptName = $((Split-Path $PSCommandPath -Leaf) -Replace '.ps1', $null)

#region set our defaults for the our functions
#region Write-CMLogEntry defaults
$Bias = Get-WmiObject -Class Win32_TimeZone | Select-Object -ExpandProperty Bias
$PSDefaultParameterValues.Add("Write-CMLogEntry:Bias", $Bias)
$PSDefaultParameterValues.Add("Write-CMLogEntry:FileName", [string]::Format("{0}-{1}.log", $RBInstance, $ComputerName))
$PSDefaultParameterValues.Add("Write-CMLogEntry:Folder", $LogLocation)
$PSDefaultParameterValues.Add("Write-CMLogEntry:Component", "[$ComputerName]::[$ScriptName]")
#endregion Write-CMLogEntry defaults

#region Update-DBServerStatus defaults
$PSDefaultParameterValues.Add("Update-DBServerStatus:ComputerName", $ComputerName)
$PSDefaultParameterValues.Add("Update-DBServerStatus:RBInstance", $RBInstance)
$PSDefaultParameterValues.Add("Update-DBServerStatus:SQLServer", $SQLServer)
$PSDefaultParameterValues.Add("Update-DBServerStatus:Database", $OrchStagingDB)
#endregion Update-DBServerStatus defaults

#region Start-CompPatchQuery defaults
$PSDefaultParameterValues.Add("Start-CompPatchQuery:SQLServer", $SQLServer)
$PSDefaultParameterValues.Add("Start-CompPatchQuery:Database", $OrchStagingDB)
#endregion Start-CompPatchQuery defaults
#endregion set our defaults for our functions


Write-CMLogEntry "Runbook activity script started - [Running On = $env:ComputerName]"
Update-DBServerStatus -Status "Started $ScriptName"
Update-DBServerStatus -Stage 'Start' -Component $ScriptName -DryRun $DryRun

try {
    #region create credential objects
    Write-CMLogEntry "Creating necessary credential objects"
    $RemotingCreds = Get-StoredCredential -ComputerName $ComputerName -SQLServer $SQLServer -Database $OrchStagingDB
    #endregion create credential objects

    $FQDN = Get-FQDNFromDB -ComputerName $ComputerName -SQLServer $SQLServer -Database $OrchStagingDB

    #region reboot and monitor for services to validate that server starts back up
    #region reboot
    Write-CMLogEntry "Invoking reboot of $ComputerName"
    Update-DBServerStatus -LastStatus 'Restarting'
    try {
        Restart-Computer -ComputerName $FQDN -Wait:$true -For Wmi -Force:$true -Credential $RemotingCreds -Delay 10 -Timeout 2700 -ErrorAction Stop
    }
    catch {
        $Message = $PSItem.Exception.Message
        if ($Message -notmatch 'A system shutdown is in progress') {
            Write-Error -Message "Failed to execute Restart-Computer for $ComputerName with message [$Message]" -ErrorAction Stop
        }
    }
    Write-CMLogEntry "Reboot complete for $ComputerName"
    #endregion reboot

    #region initiate CIMSession, looping until one is made, or it has been 10 minutes
    Update-DBServerStatus -LastStatus 'Creating CIMSession'
    Write-CMLogEntry 'Creating CIMSession'
    New-LoopAction -LoopTimeout 30 -LoopTimeoutType Minutes -LoopDelay 10 -ExitCondition { $script:CIMSession } -ScriptBlock {
        $script:CIMSession = New-MrCimSession -Credential $script:RemotingCreds -ComputerName $script:FQDN
    } -IfSucceedScript { 
        Update-DBServerStatus -LastStatus "CIMSession Created"
        Write-CMLogEntry 'CIMSession created succesfully' 
    } -IfTimeoutScript {
        Write-CMLogEntry 'Failed to create CIMSession'
        throw 'Failed to create CIMsession'
    }
    #endregion initiate CIMSession, looping until one is made, or it has been 10 minutes

    #region post-reboot service check loop
    # loop to validate critical services start. This is how we know when the server has 'started' - check every 5 seconds for 15 minutes
    $MonitoredServices = @('netlogon', 'winmgmt', 'ccmexec')
    Update-DBServerStatus -LastStatus "Waiting on $($MonitoredServices -join ' ') services"
    Write-CMLogEntry "Waiting on $($MonitoredServices -join ' ') services"
    [hashtable]$Services = @{ }
    foreach ($StartupService in $MonitoredServices) {
        $Services.Add($StartupService, 'Stopped')
    }

    $newLoopActionSplat = @{
        LoopTimeoutType = 'Minutes'
        ScriptBlock     = {
            foreach ($Service in @($script:Services.Keys)) {
                if ($script:Services[$Service] -ne 'Running') {
                    if (Get-WmiObject -ComputerName $FQDN -Class Win32_Service -Filter "Name='$Service' and State='Running'" -Credential $RemotingCreds) {
                        $script:Services.Remove($Service)
                        Write-CMLogEntry "Validated that $($Service) is in a state of 'Running'"
                        if ($script:Services.Count -ne 0) {
                            Update-DBServerStatus -LastStatus "Waiting on $($script:Services.Keys -join ' ') services"
                            Write-CMLogEntry "Waiting on $($script:Services.Keys -join ' ') services"
                        }
                    }
                }
            }
        }
        ExitCondition   = { $script:Services.Count -eq 0 }
        IfTimeoutScript = { throw 'Service startup failed' }
        LoopDelayType   = 'Seconds'
        LoopDelay       = 10
        IfSucceedScript = {
            Write-CMLogEntry "Validated that $($MonitoredServices -join ',') services are running"
            $script:ResultStatus = 'Success'
        }
        LoopTimeout     = 15
    }
    New-LoopAction @newLoopActionSplat
    #endregion post-reboot service check loop
    #endregion reboot and monitor for services to validate that server starts back up
}
catch {
    # Catch any errors thrown above here, setting the result status and recording the error message to return to the activity for data bus publishing
    $ResultStatus = "Failed"
    $ErrorMessage = $error[0].Exception.Message
    Write-CMLogEntry "Exception caught during action [$global:CurrentAction]: $ErrorMessage" -Severity 3
}
finally {
    # Always do whatever is in the finally block. In this case, adding some additional detail about the outcome to the trace log for return
    if ($ErrorMessage.Length -gt 0) {
        Write-CMLogEntry "Exiting script with result [$ResultStatus] and error message [$ErrorMessage]" -Severity 3
    }
    else {
        Write-CMLogEntry "Exiting script with result [$ResultStatus]"
    }
    if ($CIMSession) {
        $CIMSession.Close()
    }
}
# Record end of activity script process
Update-DBServerStatus -Status "Finished $ScriptName" -LastStatus "Restart $ResultStatus"
Update-DBServerStatus -Stage 'End' -Component $ScriptName
Write-CMLogEntry "Script finished"